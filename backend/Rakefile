# frozen_string_literal: true

require "rake/testtask"
require "rubocop/rake_task"
require "rubycritic/rake_task"
require "graphql/rake_task"
require "dotenv/tasks"

Rake::TestTask.new(:test) do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
end

RuboCop::RakeTask.new
RubyCritic::RakeTask.new do |task|
  task.paths   = FileList['./lib/ticketman/domain/']
  task.options = "--mode-ci --branch main --format json"
end
GraphQL::RakeTask.new(
  load_schema: lambda { |_task|
    require_relative "./lib/ticketman"
    Ticketman::Web::GraphQL::Schema
  }
)

desc "Load environment variables"
task :environment do
  require_relative "lib/ticketman/bootstrap/environment"
end

namespace :db do
  migrate_base = lambda {
    "migrate -database mongodb://#{ENV.fetch('DATABASE_USER', nil)}:#{ENV.fetch('DATABASE_PASSWORD', nil)}@#{ENV.fetch('DATABASE_HOST', nil)}/#{ENV.fetch('DATABASE_NAME', nil)} -path db/migrations/"
  }

  desc "Run migration"
  task migrate: :environment do
    `#{migrate_base.call} up`
  end

  namespace :migrate do
    desc "Create migration"
    task :create, ["name"] do |_, args|
      `migrate create -ext json -dir db/migrations -seq #{args.name}`
    end

    desc "Run migration force"
    task :force, ["version"] => :environment do |_, args|
      `#{migrate_base.call} force #{args.version}`
    end

    desc "Run migration rollback"
    task rollback: :environment do
      `#{migrate_base.call} down`
    end
  end
end

task default: %i[test rubocop rubycritic]
